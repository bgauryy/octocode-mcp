#!/usr/bin/env node --import tsx/esm
/* eslint-disable no-console */
/**
 * üîß GENERATE OUTPUT FILES FOR JSON EXAMPLES
 * 
 * This script processes all JSON example files and generates corresponding
 * _output.txt files showing the LLM-transformed format for easy comparison.
 * 
 * @author Octocode Team
 * @version 1.0.0
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { jsonToLLMString } from '../src/jsonToLLMString';

// Get current directory in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ANSI color codes for output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

/**
 * Process a single JSON file and generate its output
 */
function processJsonFile(filename: string): void {
  const inputPath = path.join(__dirname, filename);
  const outputFilename = filename.replace('.json', '_output.txt');
  const outputPath = path.join(__dirname, outputFilename);

  try {
    console.log(`${colors.blue}üìÑ Processing: ${filename}${colors.reset}`);
    
    // Read and parse JSON file
    const jsonContent = fs.readFileSync(inputPath, 'utf-8');
    const jsonObject = JSON.parse(jsonContent);
    
    // Transform with jsonToLLMString
    const llmFormatted = jsonToLLMString(jsonObject);
    
    // Create output content with header
    const outputContent = `# ${filename} - LLM-Optimized Format
# Generated by jsonToLLMString function
# This shows how the JSON is transformed for better LLM comprehension
# 
# Key improvements:
# - Arrays as "LIST:" format instead of brackets
# - Semantic labels (Repository, Owner, FilePath, etc.)
# - Boolean values as "yes/no" instead of "true/false"
# - Eliminated JSON syntax noise (quotes, brackets, braces)
# - Zero data loss with enhanced readability
#
# ====================================================================

${llmFormatted}`;

    // Write output file
    fs.writeFileSync(outputPath, outputContent, 'utf-8');
    
    console.log(`   ${colors.green}‚úÖ Generated: ${outputFilename}${colors.reset}`);
    console.log(`   üìè Output size: ${llmFormatted.length.toLocaleString()} characters`);
    
  } catch (error) {
    console.error(`   ‚ùå Error processing ${filename}:`, error);
  }
}

/**
 * Main function to process all JSON example files
 */
function main(): void {
  console.log(`${colors.bright}${colors.cyan}üîß Generating Output Files for JSON Examples${colors.reset}`);
  console.log(`${colors.cyan}   Creating _output.txt files for easy LLM format comparison${colors.reset}\n`);

  // Define all JSON example files
  const jsonFiles = [
    'github-repo-search.json',
    'npm-package-info.json', 
    'github-code-search.json',
    'github-pull-request.json',
    'mixed-responses.json'
  ];

  // Process each JSON file
  for (const filename of jsonFiles) {
    processJsonFile(filename);
  }

  console.log(`\n${colors.green}‚úÖ Output generation complete!${colors.reset}`);
  console.log(`${colors.cyan}üìÅ All _output.txt files created in: ${__dirname}${colors.reset}`);
  console.log(`${colors.cyan}üîß Use these files to compare JSON vs LLM formats side-by-side${colors.reset}`);
}

// Run the script
main();
