# github-code-search.json - LLM-Optimized Format
# Generated by jsonToLLMString function
# This shows how the JSON is transformed for better LLM comprehension
# 
# Key improvements:
# - Arrays as "LIST:" format instead of brackets
# - Semantic labels (Repository, Owner, FilePath, etc.)
# - Boolean values as "yes/no" instead of "true/false"
# - Eliminated JSON syntax noise (quotes, brackets, braces)
# - Zero data loss with enhanced readability
#
# ====================================================================

_comment: 🔍 GitHub Code Search API Response Example
_description: This file contains a GitHub code search response with text matches that tests jsonToLLMString's ability to handle: (1) Code fragments with syntax highlighting, (2) Text match arrays with indices and highlighted terms, (3) Repository metadata embedded in search results, (4) Multi-language code samples (TypeScript, JavaScript, Python), (5) File path and URL structures, (6) Score-based ranking systems, (7) Complex nested arrays with match objects. This represents the most complex search result with actual code content.
_test_cases: Tests code fragment preservation, text match array formatting (matches->LIST), repository nesting, and multi-language syntax handling
Total_count: 7892
Incomplete_results: no
Items:
  Item 1:
    Name: authentication.ts
    File: src/auth/authentication.ts
    SHA: f7e8d9c0b1a2e3f4567890abcdef123456789012
    URL: https://api.github.com/repos/octocode/advanced-toolkit/contents/src/auth/authentication.ts?ref=main
    Git_url: https://api.github.com/repos/octocode/advanced-toolkit/git/blobs/f7e8d9c0b1a2e3f4567890abcdef123456789012
    Html_url: https://github.com/octocode/advanced-toolkit/blob/main/src/auth/authentication.ts
    Repository:
      ID: 567890123
      Node_id: R_kgDOIgw4Cw
      Name: advanced-toolkit
      Full_name: octocode/advanced-toolkit
      Private: no
      Owner:
        Login: octocode
        ID: 98765432
        Node_id: O_kgDOBeC5_A
        Avatar_url: https://avatars.githubusercontent.com/u/98765432?s=40&v=4
        Gravatar_id: 
        URL: https://api.github.com/users/octocode
        Html_url: https://github.com/octocode
        Followers_url: https://api.github.com/users/octocode/followers
        Following_url: https://api.github.com/users/octocode/following{/other_user}
        Gists_url: https://api.github.com/users/octocode/gists{/gist_id}
        Starred_url: https://api.github.com/users/octocode/starred{/owner}{/repo}
        Subscriptions_url: https://api.github.com/users/octocode/subscriptions
        Organizations_url: https://api.github.com/users/octocode/orgs
        Repos_url: https://api.github.com/users/octocode/repos
        Events_url: https://api.github.com/users/octocode/events{/privacy}
        Received_events_url: https://api.github.com/users/octocode/received_events
        Type: Organization
        Site_admin: no
      Html_url: https://github.com/octocode/advanced-toolkit
      Description: A comprehensive toolkit for advanced code analysis, transformation, and optimization with AI-powered features
      Fork: no
      URL: https://api.github.com/repos/octocode/advanced-toolkit
      Created_at: 2023-01-15T14:22:33Z
      Updated_at: 2023-12-15T09:30:45Z
      Pushed_at: 2023-12-15T08:15:22Z
      Clone_url: https://github.com/octocode/advanced-toolkit.git
      Size: 15678
      Stargazers_count: 4521
      Watchers_count: 4521
      Language: TypeScript
      Has_issues: yes
      Has_projects: yes
      Has_wiki: yes
      Has_pages: no
      Has_downloads: yes
      Archived: no
      Disabled: no
      Open_issues_count: 42
      License:
        Key: mit
        Name: MIT License
        Spdx_id: MIT
        URL: https://api.github.com/licenses/mit
        Node_id: MDc6TGljZW5zZW1pdA==
      Allow_forking: yes
      Is_template: no
      Web_commit_signoff_required: no
      Topics: LIST: code-analysis, typescript, ai, developer-tools, automation
      Visibility: public
      Forks: 789
      Open_issues: 42
      Watchers: 4521
      Default_branch: main
    Score: 1
    Text_matches:
      Item 1:
        Object_url: https://api.github.com/repos/octocode/advanced-toolkit/contents/src/auth/authentication.ts?ref=main
        Object_type: FileMatch
        Property: content
        Fragment: import { OAuth2Client } from 'google-auth-library';
import { GitHubAuthProvider } from './providers/github';
import { GoogleAuthProvider } from './providers/google';
import { MicrosoftAuthProvider } from './providers/microsoft';
import { JWTToken, AuthProvider, UserProfile, AuthConfig } from '../types/auth';

/**
 * Advanced authentication manager with support for multiple OAuth providers
 * and JWT token management with refresh capabilities.
 */
export class AuthenticationManager {
  private providers: Map<string, AuthProvider>;
  private config: AuthConfig;
  private refreshTokens: Map<string, string>;

  constructor(config: AuthConfig) {
    this.config = config;
    this.providers = new Map();
    this.refreshTokens = new Map();
    
    // Initialize supported authentication providers
    this.initializeProviders();
  }

  /**
   * Initialize all configured authentication providers
   */
  private initializeProviders(): void {
    if (this.config.github?.enabled) {
      this.providers.set('github', new GitHubAuthProvider(this.config.github));
    }
    
    if (this.config.google?.enabled) {
      this.providers.set('google', new GoogleAuthProvider(this.config.google));
    }
    
    if (this.config.microsoft?.enabled) {
      this.providers.set('microsoft', new MicrosoftAuthProvider(this.config.microsoft));
    }
  }

  /**
   * Authenticate user with specified provider
   * @param provider - Authentication provider name
   * @param credentials - User credentials or authorization code
   * @returns Promise<UserProfile> - Authenticated user profile
   */
  async authenticate(provider: string, credentials: any): Promise<UserProfile> {
    const authProvider = this.providers.get(provider);
    
    if (!authProvider) {
      throw new Error(`Authentication provider '${provider}' not found or not enabled`);
    }
    
    try {
      const userProfile = await authProvider.authenticate(credentials);
      
      // Store refresh token if available
      if (userProfile.refreshToken) {
        this.refreshTokens.set(userProfile.id, userProfile.refreshToken);
      }
      
      return userProfile;
    } catch (error) {
      throw new Error(`Authentication failed for provider '${provider}': ${error.message}`);
    }
  }
        Matches:
          Item 1:
            Text: authenticate
            Indices: LIST: 1245, 1257
          Item 2:
            Text: authentication
            Indices: LIST: 567, 581
          Item 3:
            Text: AuthenticationManager
            Indices: LIST: 789, 810
      Item 2:
        Object_url: https://api.github.com/repos/octocode/advanced-toolkit/contents/src/auth/authentication.ts?ref=main
        Object_type: FileMatch
        Property: content
        Fragment:   /**
   * Refresh authentication token
   * @param userId - User identifier
   * @returns Promise<JWTToken> - New authentication token
   */
  async refreshToken(userId: string): Promise<JWTToken> {
    const refreshToken = this.refreshTokens.get(userId);
    
    if (!refreshToken) {
      throw new Error(`No refresh token available for user: ${userId}`);
    }
    
    // Find the provider that issued this token
    for (const [providerName, provider] of this.providers) {
      try {
        const newToken = await provider.refreshToken(refreshToken);
        return newToken;
      } catch (error) {
        // Continue to next provider if this one fails
        continue;
      }
    }
    
    throw new Error(`Failed to refresh token for user: ${userId}`);
  }
        Matches:
          Item 1:
            Text: refreshToken
            Indices: LIST: 98, 110
          Item 2:
            Text: authentication
            Indices: LIST: 34, 48
  Item 2:
    Name: oauth-manager.js
    File: lib/auth/oauth-manager.js
    SHA: a1b2c3d4e5f67890abcdef1234567890fedcba12
    URL: https://api.github.com/repos/awesome-org/oauth-toolkit/contents/lib/auth/oauth-manager.js?ref=master
    Git_url: https://api.github.com/repos/awesome-org/oauth-toolkit/git/blobs/a1b2c3d4e5f67890abcdef1234567890fedcba12
    Html_url: https://github.com/awesome-org/oauth-toolkit/blob/master/lib/auth/oauth-manager.js
    Repository:
      ID: 234567890
      Node_id: R_kgDON2DYQg
      Name: oauth-toolkit
      Full_name: awesome-org/oauth-toolkit
      Private: no
      Owner:
        Login: awesome-org
        ID: 12345678
        Node_id: MDEyOk9yZ2FuaXphdGlvbjEyMzQ1Njc4
        Avatar_url: https://avatars.githubusercontent.com/u/12345678?s=40&v=4
        Type: Organization
        Site_admin: no
      Html_url: https://github.com/awesome-org/oauth-toolkit
      Description: Comprehensive OAuth 2.0 and OpenID Connect toolkit for Node.js applications
      Fork: no
      Created_at: 2022-08-10T11:30:15Z
      Updated_at: 2023-12-14T16:45:30Z
      Pushed_at: 2023-12-14T15:20:45Z
      Size: 8945
      Stargazers_count: 2341
      Language: JavaScript
      Forks: 456
      Open_issues: 18
      License:
        Key: apache-2.0
        Name: Apache License 2.0
        Spdx_id: Apache-2.0
      Topics: LIST: oauth, oauth2, openid-connect, authentication, nodejs, javascript
      Default_branch: master
    Score: 0.85
    Text_matches:
      Item 1:
        Object_url: https://api.github.com/repos/awesome-org/oauth-toolkit/contents/lib/auth/oauth-manager.js?ref=master
        Object_type: FileMatch
        Property: content
        Fragment: const crypto = require('crypto');
const axios = require('axios');
const jwt = require('jsonwebtoken');

/**
 * OAuth 2.0 Manager for handling various authentication flows
 * Supports Authorization Code, Client Credentials, and PKCE flows
 */
class OAuthManager {
  constructor(config) {
    this.config = config;
    this.tokenCache = new Map();
    this.refreshTokens = new Map();
    
    // Validate required configuration
    this.validateConfig();
  }
  
  /**
   * Validate OAuth configuration
   */
  validateConfig() {
    const required = ['clientId', 'clientSecret', 'redirectUri', 'authorizationEndpoint', 'tokenEndpoint'];
    
    for (const field of required) {
      if (!this.config[field]) {
        throw new Error(`Missing required OAuth configuration: ${field}`);
      }
    }
  }
        Matches:
          Item 1:
            Text: OAuth
            Indices: LIST: 156, 161
          Item 2:
            Text: authentication
            Indices: LIST: 203, 217
          Item 3:
            Text: OAuthManager
            Indices: LIST: 268, 280
  Item 3:
    Name: user-auth.py
    File: auth/user-auth.py
    SHA: 9f8e7d6c5b4a39281706f5e4d3c2b1a0987654321
    URL: https://api.github.com/repos/python-auth/flask-auth-system/contents/auth/user-auth.py?ref=main
    Git_url: https://api.github.com/repos/python-auth/flask-auth-system/git/blobs/9f8e7d6c5b4a39281706f5e4d3c2b1a0987654321
    Html_url: https://github.com/python-auth/flask-auth-system/blob/main/auth/user-auth.py
    Repository:
      ID: 345678901
      Name: flask-auth-system
      Full_name: python-auth/flask-auth-system
      Private: no
      Owner:
        Login: python-auth
        ID: 87654321
        Type: Organization
      Description: Complete Flask authentication system with JWT, OAuth, and session management
      Language: Python
      Stargazers_count: 1876
      Forks: 312
      Topics: LIST: flask, python, authentication, jwt, oauth, sessions
    Score: 0.72
    Text_matches:
      Item 1:
        Object_type: FileMatch
        Property: content
        Fragment: import hashlib
import jwt
import bcrypt
from datetime import datetime, timedelta
from flask import current_app, request, jsonify
from werkzeug.security import generate_password_hash, check_password_hash

class UserAuthentication:
    """Advanced user authentication system with multiple security layers"""
    
    def __init__(self, app=None):
        self.app = app
        self.failed_attempts = {}
        self.blocked_ips = set()
        
        if app:
            self.init_app(app)
    
    def authenticate_user(self, username, password, ip_address=None):
        """Authenticate user with rate limiting and security checks"""
        
        # Check for blocked IP
        if ip_address and ip_address in self.blocked_ips:
            return {'success': False, 'error': 'IP address blocked'}
        
        # Rate limiting check
        if self._is_rate_limited(username, ip_address):
            return {'success': False, 'error': 'Too many failed attempts'}
        
        # Validate credentials
        user = self._validate_credentials(username, password)
        
        if user:
            # Clear failed attempts on successful login
            self._clear_failed_attempts(username, ip_address)
            
            # Generate JWT token
            token = self._generate_jwt_token(user)
            
            return {
                'success': True,
                'user': user,
                'token': token,
                'expires_at': datetime.utcnow() + timedelta(hours=24)
            }
        else:
            # Track failed attempt
            self._track_failed_attempt(username, ip_address)
            
            return {'success': False, 'error': 'Invalid credentials'}
        Matches:
          Item 1:
            Text: authenticate
            Indices: LIST: 445, 457
          Item 2:
            Text: authentication
            Indices: LIST: 287, 301
          Item 3:
            Text: UserAuthentication
            Indices: LIST: 268, 286
Search_metadata:
  Query: authenticate user language:typescript language:javascript language:python
  Sort: indexed
  Order: desc
  Total_results: 7892
  Search_time_ms: 156.78
  Page: 1
  Per_page: 30
Rate_limit:
  Limit: 5000
  Remaining: 4987
  Reset: 1702651200
  Used: 13
  Resource: code_search