name: Publish to npm

on:
  push:
    branches:
      - master
      - main

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Enable Corepack for Yarn support
      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: yarn test

      - name: Build package
        run: yarn build

  publish:
    needs: verify
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.check-version.outputs.should_publish }}
      package_version: ${{ steps.check-version.outputs.package_version }}
      alpha_version: ${{ steps.check-version.outputs.alpha_version }}
      alpha_number: ${{ steps.check-version.outputs.alpha_number }}
      package_name: ${{ steps.check-version.outputs.package_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      # Enable Corepack for Yarn support
      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build package
        run: yarn build

      - name: Check if version should be published
        id: check-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "üì¶ Package: $PACKAGE_NAME"
          echo "üî¢ Base version from package.json: $PACKAGE_VERSION"
          
          # Safety check: Ensure we never publish a non-alpha version
          if [[ "$PACKAGE_VERSION" =~ -alpha\. ]]; then
            echo "‚ùå ERROR: package.json version already contains '-alpha' suffix!"
            echo "‚ùå This workflow should only work with clean base versions (e.g., '4.0.0')"
            exit 1
          fi
          
          # Get the latest alpha version number for this base version
          LATEST_ALPHA_NUMBER=0
          
          # Check for existing alpha versions and find the highest number
          echo "üîç Checking for existing alpha versions of $PACKAGE_VERSION..."
          for i in {1..100}; do
            if npm view "$PACKAGE_NAME@${PACKAGE_VERSION}-alpha.$i" version 2>/dev/null; then
              LATEST_ALPHA_NUMBER=$i
              echo "   Found: ${PACKAGE_VERSION}-alpha.$i"
            else
              break
            fi
          done
          
          # Increment the alpha number
          NEW_ALPHA_NUMBER=$((LATEST_ALPHA_NUMBER + 1))
          ALPHA_VERSION="${PACKAGE_VERSION}-alpha.${NEW_ALPHA_NUMBER}"
          
          echo "üìä Latest alpha number: $LATEST_ALPHA_NUMBER"
          echo "üÜï New alpha number: $NEW_ALPHA_NUMBER"
          echo "üè∑Ô∏è  New alpha version: $ALPHA_VERSION"
          echo "‚ö†Ô∏è  Will publish ONLY to 'alpha' tag, NOT 'latest'"
          
          echo "should_publish=true" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "alpha_version=$ALPHA_VERSION" >> $GITHUB_OUTPUT
          echo "alpha_number=$NEW_ALPHA_NUMBER" >> $GITHUB_OUTPUT
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Setup npmrc for automation
        if: steps.check-version.outputs.should_publish == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "always-auth=true" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish incremental alpha version to npm
        if: steps.check-version.outputs.should_publish == 'true'
        run: |
          # Safety verification before publishing
          ALPHA_VERSION="${{ steps.check-version.outputs.alpha_version }}"
          if [[ ! "$ALPHA_VERSION" =~ -alpha\. ]]; then
            echo "‚ùå CRITICAL ERROR: Version '$ALPHA_VERSION' does not contain '-alpha' suffix!"
            echo "‚ùå Refusing to publish - this could pollute the main npm release!"
            exit 1
          fi
          
          echo "üîí Safety check passed: Publishing alpha version $ALPHA_VERSION"
          
          # Temporarily update package.json version to alpha
          npm version $ALPHA_VERSION --no-git-tag-version
          
          # Publish with alpha tag (NOT latest - ensures no main version pollution)
          echo "üöÄ Publishing to npm with 'alpha' tag (NOT 'latest')..."
          yarn npm publish --access public --tag alpha
          
          # Revert package.json version back to original
          npm version ${{ steps.check-version.outputs.package_version }} --no-git-tag-version
          
          echo "‚úÖ Successfully published alpha version $ALPHA_VERSION to npm with 'alpha' tag"
          echo "‚ö†Ô∏è  This version is NOT published to 'latest' - only available via 'alpha' tag"
          echo "üì• Users can install with: npm install ${{ steps.check-version.outputs.package_name }}@alpha"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify-discord:
    needs: [verify, publish]
    runs-on: ubuntu-latest
    if: always() # Run even if previous jobs fail
    steps:
      - name: Send Discord notification
        continue-on-error: true
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          # Check if Discord webhook is configured
          if [ -z "$DISCORD_WEBHOOK" ]; then
            echo "‚ÑπÔ∏è DISCORD_WEBHOOK not configured, skipping notification"
            exit 0
          fi
          # Determine status and color
          if [ "${{ needs.verify.result }}" == "failure" ] || [ "${{ needs.publish.result }}" == "failure" ]; then
            STATUS="‚ùå **Failed**"
            COLOR=15158332  # Red
            DESCRIPTION="Build or publish failed"
          elif [ "${{ needs.publish.outputs.published }}" == "true" ]; then
            STATUS="üöÄ **Alpha Published**"
            COLOR=3066993   # Green
            DESCRIPTION="Successfully published alpha version ${{ needs.publish.outputs.alpha_version }} (alpha.${{ needs.publish.outputs.alpha_number }}) to npm"
          else
            STATUS="‚úÖ **Success**"
            COLOR=3066993   # Green
            DESCRIPTION="Build completed successfully"
          fi

          # Get commit info
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          AUTHOR="${{ github.event.head_commit.author.name }}"
          
          # Escape JSON special characters to prevent injection
          COMMIT_MSG_ESCAPED=$(echo "$COMMIT_MSG" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr '\n' ' ' | tr '\r' ' ')
          AUTHOR_ESCAPED=$(echo "$AUTHOR" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
          
          # Create JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "username": "NPM Alpha Publisher",
            "avatar_url": "https://raw.githubusercontent.com/npm/logos/master/npm%20logo/npm-logo-red.png",
            "embeds": [{
              "title": "üì¶ ${{ needs.publish.outputs.package_name || 'octocode-mcp' }} (Alpha ${{ needs.publish.outputs.alpha_number }})",
              "description": "$DESCRIPTION",
              "color": $COLOR,
              "fields": [
                {
                  "name": "Status",
                  "value": "$STATUS",
                  "inline": true
                },
                {
                  "name": "Alpha Version",
                  "value": "\`${{ needs.publish.outputs.alpha_version }}\`",
                  "inline": true
                },
                {
                  "name": "Alpha Number",
                  "value": "\`${{ needs.publish.outputs.alpha_number }}\`",
                  "inline": true
                },
                {
                  "name": "Base Version",
                  "value": "\`${{ needs.publish.outputs.package_version }}\`",
                  "inline": true
                },
                {
                  "name": "Author",
                  "value": "$AUTHOR_ESCAPED",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[\`$SHORT_SHA\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": true
                },
                {
                  "name": "Commit Message",
                  "value": "$COMMIT_MSG_ESCAPED",
                  "inline": false
                },
                {
                  "name": "Branch",
                  "value": "\`${{ github.ref_name }}\`",
                  "inline": true
                },
                {
                  "name": "Repository",
                  "value": "[View on GitHub](https://github.com/${{ github.repository }})",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions ‚Ä¢ $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
              }
            }]
          }
          EOF
          )
          
          # Send Discord webhook with error handling
          if ! curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK"; then
            echo "‚ö†Ô∏è Failed to send Discord notification, but this won't fail the workflow"
          else
            echo "‚úÖ Discord notification sent successfully"
          fi
